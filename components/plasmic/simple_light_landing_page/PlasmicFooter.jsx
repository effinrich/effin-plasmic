// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: veLEhZEbNdx4Wx5Pkd8v3H
// Component: vhK2wJcBviyx9
import * as React from 'react'
import Link from 'next/link'
import * as p from '@plasmicapp/react-web'
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from '@plasmicapp/react-web'
import IconLink from '../../IconLink' // plasmic-import: pv6iNcQDAB8O0/component
import { useScreenVariants as useScreenVariants_1WPgHaFkIlcF2N } from './PlasmicGlobalVariant__Screen' // plasmic-import: 1wPgHaFkIlcF2N/globalVariant
import '@plasmicapp/react-web/lib/plasmic.css'
import projectcss from './plasmic_simple_light_landing_page.module.css' // plasmic-import: veLEhZEbNdx4Wx5Pkd8v3H/projectcss
import sty from './PlasmicFooter.module.css' // plasmic-import: vhK2wJcBviyx9/css
import LogoIcon from './icons/PlasmicIcon__Logo' // plasmic-import: 6O8wgznZFAJqQ3/icon
import TwitterIconIcon from './icons/PlasmicIcon__TwitterIcon' // plasmic-import: 56NWgPisP-H-zR/icon
import GithubIconIcon from './icons/PlasmicIcon__GithubIcon' // plasmic-import: Jd8x1CXu-pXWI6/icon
import FacebookIconIcon from './icons/PlasmicIcon__FacebookIcon' // plasmic-import: YQqgldZf6nHDtf/icon

export const PlasmicFooter__VariantProps = new Array()

export const PlasmicFooter__ArgProps = new Array()

function PlasmicFooter__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_1WPgHaFkIlcF2N()
  })

  return (
    <p.Stack
      as={'div'}
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}>
      <div className={classNames(projectcss.all, sty.freeBox__tYzay)} />

      <p.Stack
        as={'div'}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__bEWkz)}>
        <p.Stack
          as={'div'}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__dLcUu)}>
          <IconLink
            className={classNames('__wab_instance', sty.iconLink__nq8Sy)}
            icon={
              <LogoIcon
                className={classNames(projectcss.all, sty.svg__qmIdm)}
                role={'img'}
              />
            }
          />

          <div className={classNames(projectcss.all, sty.freeBox__fvnT)}>
            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link___1GyuN
              )}
              component={Link}
              href={'#'}
              platform={'nextjs'}>
              {'Terms'}
            </p.PlasmicLink>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hgZ9E
              )}>
              {' Â· '}
            </div>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link___943Od
              )}
              component={Link}
              href={'#'}
              platform={'nextjs'}>
              {'Privacy'}
            </p.PlasmicLink>
          </div>
        </p.Stack>

        <p.Stack
          as={'div'}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__mAeYo)}>
          <p.Stack
            as={'div'}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__cpjpf)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bpCza
              )}>
              {'Products'}
            </div>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__eucbw
              )}
              component={Link}
              href={'#'}
              platform={'nextjs'}>
              {'Web Studio'}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link___1O6Yz
              )}
              component={Link}
              href={'#'}
              platform={'nextjs'}>
              {'DynamicBox Flex'}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__fBvYa
              )}
              component={Link}
              href={'#'}
              platform={'nextjs'}>
              {'Programming Forms'}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link___3Cskm
              )}
              component={Link}
              href={'#'}
              platform={'nextjs'}>
              {'Integrations'}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link___0P1O5
              )}
              component={Link}
              href={'#'}
              platform={'nextjs'}>
              {'Command-line'}
            </p.PlasmicLink>
          </p.Stack>

          <p.Stack
            as={'div'}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__dohgX)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wen8S
              )}>
              {'Resources'}
            </div>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__yD4
              )}
              component={Link}
              href={'#'}
              platform={'nextjs'}>
              {'Documentation'}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__hjppd
              )}
              component={Link}
              href={'#'}
              platform={'nextjs'}>
              {'Tutorials & Guides'}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__ss6O7
              )}
              component={Link}
              href={'#'}
              platform={'nextjs'}>
              {'Blog'}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link___7XYql
              )}
              component={Link}
              href={'#'}
              platform={'nextjs'}>
              {'Support Center'}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link___7C52R
              )}
              component={Link}
              href={'#'}
              platform={'nextjs'}>
              {'Partners'}
            </p.PlasmicLink>
          </p.Stack>

          <p.Stack
            as={'div'}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ebKpH)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sjSrA
              )}>
              {'Company'}
            </div>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__wn5Ou
              )}
              component={Link}
              href={'#'}
              platform={'nextjs'}>
              {'Home'}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__hcw5
              )}
              component={Link}
              href={'#'}
              platform={'nextjs'}>
              {'About us'}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link___754Jd
              )}
              component={Link}
              href={'#'}
              platform={'nextjs'}>
              {'Company values'}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__gdfLg
              )}
              component={Link}
              href={'#'}
              platform={'nextjs'}>
              {'Pricing'}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__lnEd5
              )}
              component={Link}
              href={'#'}
              platform={'nextjs'}>
              {'Privacy policy'}
            </p.PlasmicLink>
          </p.Stack>

          <p.Stack
            as={'div'}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___2DySy)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___93Lr6
              )}>
              {'Subscribe'}
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1Qtzs
              )}>
              {'Get the latest news and articles to your inbox every month.'}
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__v7KKf)}>
              <input
                data-plasmic-name={'textInput'}
                data-plasmic-override={overrides.textInput ?? overrides.textbox}
                className={classNames(projectcss.input, sty.textInput)}
                placeholder={'Your email'}
                size={1}
                type={'text'}
              />

              <button
                data-plasmic-name={'button'}
                data-plasmic-override={overrides.button}
                className={classNames(
                  projectcss.button,
                  projectcss.__wab_text,
                  sty.button
                )}>
                {'>'}
              </button>
            </div>
          </p.Stack>
        </p.Stack>
      </p.Stack>

      <div className={classNames(projectcss.all, sty.freeBox__qPji8)} />

      <p.Stack
        as={'div'}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___339EB)}>
        <div className={classNames(projectcss.all, sty.freeBox__u8Kcp)}>
          <p.PlasmicLink
            className={classNames(
              projectcss.a,
              projectcss.__wab_text,
              sty.link__in3Wv
            )}
            component={Link}
            href={'https://cruip.com/'}
            platform={'nextjs'}>
            {'Designed by Cruip. '}
          </p.PlasmicLink>

          <p.PlasmicLink
            className={classNames(
              projectcss.a,
              projectcss.__wab_text,
              sty.link__s0GOx
            )}
            component={Link}
            href={'https://www.plasmic.app/'}
            platform={'nextjs'}>
            {'Built in Plasmic. '}
          </p.PlasmicLink>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__sCc6V
            )}>
            {'All rights reserved.'}
          </div>
        </div>

        <p.Stack
          as={'div'}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__fe51F)}>
          <IconLink
            className={classNames('__wab_instance', sty.iconLink__y20Nm)}
            icon={
              <TwitterIconIcon
                className={classNames(projectcss.all, sty.svg___2PE1T)}
                role={'img'}
              />
            }
          />

          <IconLink
            className={classNames('__wab_instance', sty.iconLink__l8LNt)}
            icon={
              <GithubIconIcon
                className={classNames(projectcss.all, sty.svg__uhWki)}
                role={'img'}
              />
            }
          />

          <IconLink
            className={classNames('__wab_instance', sty.iconLink__vEmXa)}
            icon={
              <FacebookIconIcon
                className={classNames(projectcss.all, sty.svg__g219)}
                role={'img'}
              />
            }
          />
        </p.Stack>
      </p.Stack>
    </p.Stack>
  )
}

const PlasmicDescendants = {
  root: ['root', 'textInput', 'textbox', 'button'],
  textInput: ['textInput', 'textbox'],
  button: ['button']
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooter__ArgProps,
      internalVariantPropNames: PlasmicFooter__VariantProps
    })

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    })
  }
  if (nodeName === 'root') {
    func.displayName = 'PlasmicFooter'
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`
  }
  return func
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent('textInput'),
    button: makeNodeComponent('button'),
    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
)

export default PlasmicFooter
/* prettier-ignore-end */
