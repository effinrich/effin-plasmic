// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: veLEhZEbNdx4Wx5Pkd8v3H
// Component: 7vtDOH-RWmgiV
import * as React from 'react'
import * as p from '@plasmicapp/react-web'
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from '@plasmicapp/react-web'
import LinkButton from '../../LinkButton' // plasmic-import: lSTIGdfMG8akB/component
import { useScreenVariants as useScreenVariants_1WPgHaFkIlcF2N } from './PlasmicGlobalVariant__Screen' // plasmic-import: 1wPgHaFkIlcF2N/globalVariant
import '@plasmicapp/react-web/lib/plasmic.css'
import projectcss from './plasmic_simple_light_landing_page.module.css' // plasmic-import: veLEhZEbNdx4Wx5Pkd8v3H/projectcss
import sty from './PlasmicHomeCta.module.css' // plasmic-import: 7vtDOH-RWmgiV/css
import SphereIcon from './icons/PlasmicIcon__Sphere' // plasmic-import: 06nE2vE4341fto/icon

export const PlasmicHomeCta__VariantProps = new Array()

export const PlasmicHomeCta__ArgProps = new Array()

function PlasmicHomeCta__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_1WPgHaFkIlcF2N()
  })

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}>
      <p.Stack
        as={'div'}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__eyAAc)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__siV8Q
          )}>
          {'Powering your business'}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__qXeQp
          )}>
          {
            'Lorem ipsum dolor sit amet consectetur adipisicing elit nemo expedita voluptas culpa sapiente.'
          }
        </div>

        <p.Stack
          as={'div'}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__oc7Pg)}>
          <input
            data-plasmic-name={'textInput'}
            data-plasmic-override={overrides.textInput ?? overrides.textbox}
            className={classNames(projectcss.input, sty.textInput)}
            placeholder={'Your email...'}
            size={1}
            type={'text'}
          />

          <LinkButton
            data-plasmic-name={'linkButton'}
            data-plasmic-override={overrides.linkButton}
            className={classNames('__wab_instance', sty.linkButton)}
            text={'Subscribe'}
            type={'solidBlue'}
          />
        </p.Stack>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__q6Ry2
          )}>
          {'7 days free trial. No credit card required.'}
        </div>
      </p.Stack>

      {(hasVariant(globalVariants, 'screen', 'mobile') ? false : true) ? (
        <div className={classNames(projectcss.all, sty.freeBox___1AUuq)}>
          <SphereIcon
            data-plasmic-name={'svg'}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={'img'}
          />
        </div>
      ) : null}
    </div>
  )
}

const PlasmicDescendants = {
  root: ['root', 'textInput', 'textbox', 'linkButton', 'svg'],
  textInput: ['textInput', 'textbox'],
  linkButton: ['linkButton'],
  svg: ['svg']
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomeCta__ArgProps,
      internalVariantPropNames: PlasmicHomeCta__VariantProps
    })

    return PlasmicHomeCta__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    })
  }
  if (nodeName === 'root') {
    func.displayName = 'PlasmicHomeCta'
  } else {
    func.displayName = `PlasmicHomeCta.${nodeName}`
  }
  return func
}

export const PlasmicHomeCta = Object.assign(
  // Top-level PlasmicHomeCta renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent('textInput'),
    linkButton: makeNodeComponent('linkButton'),
    svg: makeNodeComponent('svg'),
    // Metadata about props expected for PlasmicHomeCta
    internalVariantProps: PlasmicHomeCta__VariantProps,
    internalArgProps: PlasmicHomeCta__ArgProps
  }
)

export default PlasmicHomeCta
/* prettier-ignore-end */
